const { NextResponse } = require('next/server');
const { PrismaClient } = require('@prisma/client');
const TelegramBot = require('node-telegram-bot-api');

const prisma = new PrismaClient();
const TOKEN = process.env.TELEGRAM_BOT_TOKEN;

if (!TOKEN) {
    throw new Error("TELEGRAM_BOT_TOKEN is not defined. Please set it in the environment variables.");
}

const bot = new TelegramBot(TOKEN);
const botUsername = 'naznach_twa_bot';
const webAppUrl = 'https://naznach.vercel.app';


// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function registerUser(chatId, msg) {
    return await prisma.user.create({
        data: {
            telegramId: chatId,
            firstName: msg.from?.first_name || '',
            lastName: msg.from?.last_name || '',
            chatId: chatId.toString(),
            username: msg.from?.username || '',
        },
    });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
async function sendWelcomeMessage(chatId) {
    const options = {
        reply_markup: {
            inline_keyboard: [
                [
                    { text: '–ö–ª–∏–µ–Ω—Ç', callback_data: 'client' },
                    { text: '–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç', callback_data: 'specialist' },
                ],
            ],
        },
    };
    const photoWelcome = `${webAppUrl}/11.png`;
    await bot.sendPhoto(chatId, photoWelcome, {
        caption: `üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ú—ã —Ä–∞–¥—ã –≤–∏–¥–µ—Ç—å –≤–∞—Å –≤ –Ω–∞—à–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –¥–ª—è –æ–Ω–ª–∞–π–Ω –∑–∞–ø–∏—Å–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø—Ä–æ—Ñ–∏–ª—è, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å:`,
        reply_markup: options.reply_markup,
    });
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
bot.onText(/\/start/, async (msg) => {
    const chatId = msg.chat.id.toString();
    let user = await prisma.user.findUnique({
        where: { telegramId: chatId },
    });

    if (!user) {
        user = await registerUser(chatId, msg);
        await sendWelcomeMessage(chatId);
    } else {
        const button = {
            reply_markup: {
                inline_keyboard: [
                    [
                        {
                            text: '–ü–µ—Ä–µ–π—Ç–∏ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ',
                            web_app: { url: `${webAppUrl}` },
                        },
                    ],
                ],
            },
        };
        await bot.sendMessage(chatId, '–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.', button);
    }
});

// –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on('message', async (msg) => {
    const chatId = msg.chat.id.toString();
    const text = msg.text || '';
    const startPayload = text.split(' ')[1];

    // –ü—Ä–∏–º–µ—Ä –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /start
 if (text==='/start'){
    const chatId = msg.chat.id
    bot.sendMessage(chatId, '–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç, –∏ —è —Ä–∞–±–æ—Ç–∞—é!');
};

    if (!msg.text.startsWith('/start')) {
        return; // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å /start
    }

    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –ø—Ä–æ—Ñ–∏–ª—è
bot.on('callback_query', async (callbackQuery) => {
    const chatId = callbackQuery.message?.chat.id;
    const telegramId = callbackQuery.from.id.toString();

    if (!chatId) return;

    const user = await prisma.user.findUnique({
        where: { telegramId: telegramId },
    });

    if (!user) {
        await bot.sendMessage(chatId, '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Å–Ω–∞—á–∞–ª–∞.');
        return;
    }

    if (callbackQuery.data === 'client') {
        const profileOptions = {
            reply_markup: {
                inline_keyboard: [
                    [
                        {
                            text: '–ü–µ—Ä–µ–π—Ç–∏ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ',
                            web_app: { url: `${webAppUrl}` },
                        },
                    ],
                ],
            },
        };
        const photoProfile = `${webAppUrl}/33.png`;
        await bot.sendPhoto(chatId, photoProfile, {
            caption: '–í—ã –≤—ã–±—Ä–∞–ª–∏ –ø—Ä–æ—Ñ–∏–ª—å –∫–ª–∏–µ–Ω—Ç–∞.',
            reply_markup: profileOptions.reply_markup,
        });
    } else if (callbackQuery.data === 'specialist') {
        try {
            await prisma.user.update({
                where: { telegramId: telegramId },
                data: { isMaster: true },
            });

            await prisma.specialist.create({
                data: {
                    userId: user.telegramId,
                    chatId: chatId.toString(),
                    firstName: user.firstName,
                    lastName: user.lastName,
                    username: user.username,
                    isMaster: true,
                },
            });

            const profileOptions = {
                reply_markup: {
                    inline_keyboard: [
                        [
                            {
                                text: '–ü–µ—Ä–µ–π—Ç–∏ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ',
                                web_app: { url: `${webAppUrl}` },
                            },
                        ],
                    ],
                },
            };

            const photoProfile = `${webAppUrl}/22.png`;
            await bot.sendPhoto(chatId, photoProfile, {
                caption: `–í—ã —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç. –í–æ—Ç –≤–∞—à–∞ —É–Ω–∏–∫–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –¥–ª—è –∑–∞–ø–∏—Å–∏: https://t.me/${botUsername}?start=${chatId}`,
                reply_markup: profileOptions.reply_markup,
            });
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞:', error);
            await bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
        }
    }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ POST-–∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –≤–µ–±—Ö—É–∫–∞
async function POST(req) {
    const body = await req.json();
    bot.processUpdate(body);
    return NextResponse.json({ status: 'ok' });
}

module.exports = { POST };
