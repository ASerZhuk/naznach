import { NextResponse } from 'next/server'
import TelegramBot from 'node-telegram-bot-api'
import prisma from '@/app/libs/prismadb'
import { NextApiRequest, NextApiResponse } from 'next'

const bot = new TelegramBot('7655736393:AAGYAPPjBo1WWKhAXtcUMj0FsTWH35Y7D8g')

const botUsername = 'naznach_twa_bot'
const webAppUrl = 'https://naznach.vercel.app'

// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–µ–±—Ö—É–∫ –Ω–∞ —ç—Ç–æ—Ç –º–∞—Ä—à—Ä—É—Ç
bot.setWebHook(`https://naznach.vercel.app/api/bot`)

// –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
export async function POST(req: Request) {
	try {
		const body = await req.json()
		const { message, callback_query } = body

		if (message) {
			const chatId = message.chat.id.toString()
			const text = message.text || ''
			const startPayload = text.split(' ')[1] || null

			// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
			let user = await prisma.user.findUnique({
				where: { telegramId: chatId },
			})

			if (startPayload) {
				let master = await prisma.specialist.findUnique({
					where: { userId: startPayload },
				})

				if (!user) {
					// –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
					user = await prisma.user.create({
						data: {
							telegramId: chatId,
							firstName: message.from?.first_name || '',
							lastName: message.from?.last_name || '',
							chatId: chatId.toString(),
							username: message.from?.username || '',
						},
					})
				}

				if (master) {
					// –ö–Ω–æ–ø–∫–∞ –∑–∞–ø–∏—Å–∏ –∫ –º–∞—Å—Ç–µ—Ä—É
					const button = {
						reply_markup: {
							inline_keyboard: [
								[
									{
										text: '–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –∫ –º–∞—Å—Ç–µ—Ä—É',
										web_app: {
											url: `${webAppUrl}/profile_zapis/${startPayload}`,
										},
									},
								],
							],
						},
					}

					await bot.sendMessage(
						chatId,
						`–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –∫ –º–∞—Å—Ç–µ—Ä—É <b>${master.firstName} ${master.lastName}</b>`,
						{
							reply_markup: button.reply_markup,
							parse_mode: 'HTML',
						}
					)
				} else {
					await bot.sendMessage(chatId, '–ú–∞—Å—Ç–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.')
				}

				return
			}

			// –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –∫–æ–º–∞–Ω–¥–∞ /start –±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
			if (user) {
				const button = {
					reply_markup: {
						inline_keyboard: [
							[
								{
									text: '–ü–µ—Ä–µ–π—Ç–∏ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ',
									web_app: { url: `${webAppUrl}` },
								},
							],
						],
					},
				}

				await bot.sendMessage(chatId, '–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.', button)
				return
			}

			// –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–æ–≤—ã–π –∏ –∫–æ–º–∞–Ω–¥–∞ /start –±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
			user = await prisma.user.create({
				data: {
					telegramId: chatId,
					firstName: message.from?.first_name || '',
					lastName: message.from?.last_name || '',
					chatId: chatId.toString(),
					username: message.from?.username || '',
				},
			})

			// –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º —Ç–∏–ø–∞ –ø—Ä–æ—Ñ–∏–ª—è
			const options = {
				reply_markup: {
					inline_keyboard: [
						[
							{ text: '–ö–ª–∏–µ–Ω—Ç', callback_data: 'client' },
							{ text: '–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç', callback_data: 'specialist' },
						],
					],
				},
			}

			const photoWelcome = `${webAppUrl}/11.png`

			await bot.sendPhoto(chatId, photoWelcome, {
				caption: `üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ú—ã —Ä–∞–¥—ã –≤–∏–¥–µ—Ç—å –≤–∞—Å –≤ –Ω–∞—à–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –¥–ª—è –æ–Ω–ª–∞–π–Ω –∑–∞–ø–∏—Å–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø—Ä–æ—Ñ–∏–ª—è, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å:`,
				reply_markup: options.reply_markup,
			})
		}

		if (callback_query) {
			const chatId = callback_query.message.chat.id.toString()
			const userId = callback_query.from.id.toString()
			const username = callback_query.from.username || ''

			if (callback_query.data === 'client') {
				await bot.sendMessage(
					chatId,
					'–í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –∫–ª–∏–µ–Ω—Ç. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –∑–∞–ø–∏—Å–∏.',
					{
						reply_markup: {
							inline_keyboard: [
								[
									{
										text: '–ü–µ—Ä–µ–π—Ç–∏ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ',
										web_app: { url: `${webAppUrl}` },
									},
								],
							],
						},
					}
				)
			}

			if (callback_query.data === 'specialist') {
				let master = await prisma.specialist.findUnique({
					where: { userId },
				})

				if (!master) {
					await prisma.specialist.create({
						data: {
							userId,
							chatId,
							firstName: callback_query.from.first_name || '',
							lastName: callback_query.from.last_name || '',
							username,
							isMaster: true,
						},
					})

					await prisma.user.update({
						where: { telegramId: userId },
						data: { isMaster: true },
					})

					const profileUrl = `https://t.me/${botUsername}?start=${username}`

					await bot.sendMessage(
						chatId,
						`–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç! –í–∞—à–∞ —É–Ω–∏–∫–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: ${profileUrl}`
					)

					const profileButton = [
						[
							{
								text: '–ü–µ—Ä–µ–π—Ç–∏ –≤ –ø—Ä–æ—Ñ–∏–ª—å',
								web_app: { url: `${webAppUrl}/profile/${username}` },
							},
						],
					]

					await bot.sendMessage(
						chatId,
						'–í—ã –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–π—Ç–∏ –≤ —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.',
						{
							reply_markup: { inline_keyboard: profileButton },
						}
					)
				} else {
					await bot.sendMessage(
						chatId,
						'–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç.'
					)
				}
			}
		}

		return NextResponse.json({ success: true })
	} catch (error) {
		console.error('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞:', error)
		return NextResponse.json({ error }, { status: 500 })
	}
}
