import { NextResponse } from 'next/server'
import TelegramBot from 'node-telegram-bot-api'
import prisma from '@/app/libs/prismadb'
import { NextApiRequest, NextApiResponse } from 'next'

const bot = new TelegramBot('7655736393:AAGYAPPjBo1WWKhAXtcUMj0FsTWH35Y7D8g')

const botUsername = 'naznach_twa_bot'
const webAppUrl = 'https://naznach.vercel.app'

// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–µ–±—Ö—É–∫ –Ω–∞ —ç—Ç–æ—Ç –º–∞—Ä—à—Ä—É—Ç
bot.setWebHook(`https://naznach.vercel.app/api/bot`)

// –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
export async function POST(req: NextApiRequest, res: NextApiResponse) {
	try {
		const { message, callback_query } = req.body

		if (message) {
			const chatId = message.chat.id.toString()
			const text = message.text
			const username = message.chat.username || ''
			const userId = message.from.id.toString()

			if (text.startsWith('/start')) {
				const startPayload = text.split(' ')[1] || null
				let user = await prisma.user.findUnique({
					where: { telegramId: userId },
				})

				if (!user) {
					// –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
					user = await prisma.user.create({
						data: {
							telegramId: userId,
							firstName: message.chat.first_name || '',
							lastName: message.chat.last_name || '',
							username,
							chatId,
							isMaster: false,
						},
					})
				}

				if (startPayload) {
					const master = await prisma.specialist.findUnique({
						where: { userId: startPayload },
					})

					if (master) {
						const bookButton = [
							[
								{
									text: '–ó–∞–ø–∏—Å–∞—Ç—å—Å—è',
									web_app: {
										url: `${webAppUrl}/profile_zapis/${startPayload}`,
									},
								},
							],
						]

						await bot.sendMessage(
							chatId,
							`–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã –º–æ–∂–µ—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –∫ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É ${master.firstName} ${master.lastName}.`,
							{
								reply_markup: { inline_keyboard: bookButton },
							}
						)
					} else {
						await bot.sendMessage(chatId, '–¢–∞–∫–æ–≥–æ –º–∞—Å—Ç–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.')
					}
				} else {
					if (user.isMaster) {
						const profileButton = [
							[
								{
									text: '–ü–µ—Ä–µ–π—Ç–∏ –≤ –ø—Ä–æ—Ñ–∏–ª—å',
									web_app: {
										url: `${webAppUrl}/profile/${username}`,
									},
								},
							],
						]

						await bot.sendMessage(
							chatId,
							'–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –æ–±—Ä–∞—Ç–Ω–æ! –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç.',
							{
								reply_markup: { inline_keyboard: profileButton },
							}
						)
					} else {
						const inlineKeyboard = [
							[
								{
									text: '–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –∫–∞–∫ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç',
									callback_data: 'register_master',
								},
							],
						]

						await bot.sendMessage(
							chatId,
							'üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –∫–∞–∫ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –∏–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ –∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.',
							{
								reply_markup: { inline_keyboard: inlineKeyboard },
							}
						)
					}
				}
			}
		}

		if (callback_query) {
			const chatId = callback_query.message.chat.id.toString()
			const userId = callback_query.from.id.toString()
			const username = callback_query.from.username || ''

			if (callback_query.data === 'register_master') {
				let master = await prisma.specialist.findUnique({
					where: { userId },
				})

				if (!master) {
					await prisma.specialist.create({
						data: {
							userId,
							chatId,
							firstName: callback_query.from.first_name || '',
							lastName: callback_query.from.last_name || '',
							username,
							isMaster: true,
						},
					})

					await prisma.user.update({
						where: { telegramId: userId },
						data: { isMaster: true },
					})

					const profileUrl = `https://t.me/${botUsername}?start=${username}`

					await bot.sendMessage(
						chatId,
						`–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç! –í–∞—à–∞ —É–Ω–∏–∫–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: ${profileUrl}`
					)

					const profileButton = [
						[
							{
								text: '–ü–µ—Ä–µ–π—Ç–∏ –≤ –ø—Ä–æ—Ñ–∏–ª—å',
								web_app: {
									url: `${webAppUrl}/profile/${username}`,
								},
							},
						],
					]

					await bot.sendMessage(
						chatId,
						'–í—ã –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–π—Ç–∏ –≤ —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.',
						{
							reply_markup: { inline_keyboard: profileButton },
						}
					)
				} else {
					await bot.sendMessage(
						chatId,
						'–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç.'
					)
				}
			}
		}

		res.status(200).end()
	} catch (error) {
		console.error('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞:', error)
		res.status(500).json({ error: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞' })
	}
}
